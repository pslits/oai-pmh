<?php
/* +--------------------------------------------------------------------------+
 * | Filename: XMLResponseTest.php
 * | Author:   Paul Slits
 * | Project:  OAI-PMH
 * +--------------------------------------------------------------------------+
 * | Copyright (C) 2025 Paul Slits
 * |
 * | Permission is hereby granted, free of charge, to any person obtaining a
 * | copy of this software and associated documentation files (the "Software"),
 * | to deal in the Software without restriction, including without limitation
 * | the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * | and/or sell copies of the Software, and to permit persons to whom the
 * | Software is furnished to do so, subject to the following conditions:
 * |
 * | The above copyright notice and this permission notice shall be included in
 * | all copies or substantial portions of the Software.
 * |
 * | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * | EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * | MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * | IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * | CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * | TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * | SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * +--------------------------------------------------------------------------+
 */

use PHPUnit\Framework\TestCase;

/**
 * XMLResponseTest Class
 * 
 * This class tests the structure and content of XML responses generated by an OAI-PMH compliant endpoint.
 * The expected response characteristics are as follows:
 * 
 * 1. The XML must begin with the declaration: <?xml version="1.0" encoding="UTF-8"?>
 *    @see XMLResponseTest::testXMLDeclaration()
 * 
 * 2. The primary content should be encapsulated within the root element named 'OAI-PMH'. This root
 *    element must possess the following attributes:
 *    - xmlns: Set to "http://www.openarchives.org/OAI/2.0/"
 *    - xmlns:xsi: Set to "http://www.w3.org/2001/XMLSchema-instance"
 *    - xsi:schemaLocation: Should point to the namespace "http://www.openarchives.org/OAI/2.0/" 
 *      and validate against "http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd".
 *    @see XMLResponseTest::testRootElementAndAttributes()
 * 
 * 3. Every response must have two child elements in sequence under 'OAI-PMH':
 *    - responseDate: A UTCdatetime indicating when the response was sent, in UTC.
 *      @see XMLResponseTest::testResponseDateChildOfRootElement()
 *    - request: Which echoes back the base URL of the protocol request. Depending on the request's validity,
 *      this element may contain additional attributes. In cases of a 'badVerb' or 'badArgument' error,
 *      only the base URL should be present without any attributes.
 *      @see XMLResponseTest::testRequestChildOfRootElement()
 *      @see XMLResponseTest::testRequestChildAttributesForInvalidRequest()
 * 
 * 4. The third child of 'OAI-PMH' can be:
 *    - An error element, if the response encountered an error or exception.
 *      @see XMLResponseTest::testErrorChildOfRootElement()
 *    - An element that matches the verb of the OAI-PMH request, if no errors occurred.
 *      @see testVerbChildOfRootElement()
 * 
 * This test suite confirms that XML responses adhere to the above specifications.
 */
class XMLResponseTest extends TestCase
{
    private $xml;

    /**
     * Load XML from a provided URL before executing each test.
     *
     * @param string $url The endpoint URL to fetch the XML from.
     */
    protected function setUpWithUrl($url): void
    {
        $xmlResponse = file_get_contents($url);
        print($url);
        $this->xml = new DOMDocument;
        $this->xml->loadXML($xmlResponse, LIBXML_NOBLANKS);
    }

    /**
     * Provides the correct URL for XML loading.
     *
     * @return array A set of arrays, each containing a URL string.
     */
    public function correctUrlProvider(): array
    {
        return [
            'Correct URL' => ['http://localhost/oai-pmh/oai.php?verb=ListRecords&metadataPrefix=oai_dc']
        ];
    }

    /**
     * Provides incorrect URL samples for testing invalid XML responses.
     *
     * @return array A set of arrays, each containing a URL string.
     */
    public function incorrectUrlProvider(): array
    {
        return [
            'Incorrect URL' => ['http://localhost/oai-pmh/oai.php']
        ];
    }

    /**
     * Test to ensure the XML declaration is correct.
     *
     * @dataProvider correctUrlProvider
     * @param string $url The endpoint URL to test.
     */
    public function testXMLDeclaration(string $url): void
    {
        $this->setUpWithUrl($url);

        $xmlContent = $this->xml->saveXML();
        $expectedDeclaration = '<?xml version="1.0" encoding="UTF-8"?>';

        $this->assertTrue(strpos($xmlContent, $expectedDeclaration) === 0, "The XML declaration is missing or incorrect.");
    }

    /**
     * Test to validate the presence and correctness of the root element and its required attributes.
     *
     * @dataProvider correctUrlProvider
     * @param string $url The endpoint URL to test.
     */
    public function testRootElementAndAttributes(string $url): void
    {
        $this->setUpWithUrl($url);

        // Check if root element is OAI-PMH
        $root = $this->xml->documentElement;
        $this->assertEquals('OAI-PMH', $root->nodeName, "Root element should be 'OAI-PMH'.");

        // Validate OAI-PMH attributes
        $this->assertTrue($root->hasAttribute('xmlns'), "Root element missing 'xmlns' attribute.");
        $this->assertEquals('http://www.openarchives.org/OAI/2.0/', $root->getAttribute('xmlns'), "'xmlns' attribute value mismatch.");

        $this->assertTrue($root->hasAttribute('xmlns:xsi'), "Root element missing 'xmlns:xsi' attribute.");
        $this->assertEquals('http://www.w3.org/2001/XMLSchema-instance', $root->getAttribute('xmlns:xsi'), "'xmlns:xsi' attribute value mismatch.");

        $this->assertTrue($root->hasAttribute('xsi:schemaLocation'), "Root element missing 'xsi:schemaLocation' attribute.");
        $this->assertEquals('http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd', $root->getAttribute('xsi:schemaLocation'), "'xsi:schemaLocation' attribute value mismatch.");
    }

    /**
     * Test to ensure 'responseDate' is a valid child of the root element with the correct UTC format.
     *
     * @dataProvider correctUrlProvider
     * @param string $url The endpoint URL to test.
     */
    public function testResponseDateChildOfRootElement(string $url): void
    {
        $this->setUpWithUrl($url);

        $root = $this->xml->documentElement;

        // Validate responseDate
        $responseDate = $root->getElementsByTagName('responseDate')->item(0);
        $this->assertNotNull($responseDate, "Missing 'responseDate' element.");

        $dateTime = DateTime::createFromFormat('Y-m-d\TH:i:s\Z', $responseDate->nodeValue);
        $this->assertInstanceOf(DateTime::class, $dateTime, 'Invalid UTC datetime format in responseDate.');
    }

    /**
     * Test to verify the 'request' child element of the root and ensure it holds the correct baseURL value.
     *
     * @dataProvider correctUrlProvider
     * @param string $url The endpoint URL to test.
     */
    public function testRequestChildOfRootElement(string $url): void
    {
        $this->setUpWithUrl($url);

        $root = $this->xml->documentElement;

        // Validate request
        $request = $root->getElementsByTagName('request')->item(0);
        $this->assertNotNull($request, "Missing 'request' element.");

        $expectedBaseURL = 'http://localhost/oai-mph';
        $this->assertEquals($expectedBaseURL, $request->nodeValue, "The 'request' element value does not match the expected baseURL.");
    }

    /**
     * Test to ensure the 'request' child of the root element for invalid requests does not have a 'verb' attribute
     *
     * @dataProvider incorrectUrlProvider
     * @param string $url The endpoint URL to test.
     */
    public function testRequestChildAttributesForInvalidRequest(string $url): void
    {
        $this->setUpWithUrl($url);

        $root = $this->xml->documentElement;

        // Validate request
        $request = $root->getElementsByTagName('request')->item(0);
        $this->assertFalse($request->hasAttribute('verb'), "The 'request' element should not have a 'verb' attribute for invalid requests.");
    }

    /**
     * Test to ensure the presence of the 'error' child element of the root for invalid requests.
     *
     * @dataProvider incorrectUrlProvider
     * @param string $url The endpoint URL to test.
     */
    public function testErrorChildOfRootElement(string $url): void
    {
        $this->setUpWithUrl($url);

        $root = $this->xml->documentElement;

        // Validate error
        $error = $root->getElementsByTagName('error')->item(0);
        $this->assertNotNull($error, "Missing 'error' element.");
    }

    /**
     * Test to ensure the presence of the 'verb' child element of the root for invalid requests.
     *
     * @dataProvider correctUrlProvider
     * @param string $url The endpoint URL to test.
     */
    public function testVerbChildOfRootElement(string $url): void
    {
        $this->setUpWithUrl($url);

        $root = $this->xml->documentElement;

        // Validate error
        $error = $root->getElementsByTagName('ListRecords')->item(0);
        $this->assertNotNull($error, "Missing 'verb' element.");
    }
}
